{"version":3,"sources":["reactComponentLib/index.js","utils.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["root","document","documentElement","setVar","name","value","style","setProperty","useCssVar","id","useState","nanoid","isRegisteredRef","useRef","isMountedRef","useEffect","current","removeProperty","getRandomNumber","min","max","Math","random","useRandom","minVal","maxVal","minTime","maxTime","setValue","timeoutIdRef","tick","clearTimeout","nextTick","window","setTimeout","BarStyled","styled","div","heightVar","colorVar","Container","Bar","randomHeight","randomColorNumber","toString","App","Array","fill","undefined","map","_","index","key","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAIIA,EAAOC,SAASC,gBACpB,SAASC,EAAOC,EAAMC,GAClBL,EAAKM,MAAMC,YAAY,KAAOH,EAAMC,GAMxC,IAAIG,EAAY,SAAUH,GACtB,IAAII,EAAKC,mBAASC,YAAO,IAAI,GACzBC,EAAkBC,kBAAO,GACzBC,EAAeD,kBAAO,GAgB1B,OAfAE,qBAAU,WACFD,EAAaE,QACbb,EAAOM,EAAIJ,GAGXS,EAAaE,SAAU,IAE5B,CAACP,EAAIJ,IACRU,qBAAU,WACN,OAAO,WAAc,OAjBVX,EAiB2BK,OAhB1CT,EAAKM,MAAMW,eAAe,KAAOb,GADrC,IAAmBA,KAkBZ,CAACK,IACCG,EAAgBI,UACjBJ,EAAgBI,SAAU,EAC1Bb,EAAOM,EAAIJ,IAERI,G,QC7BES,EAAkB,SAACC,EAAaC,GAAd,OAAsCC,KAAKC,UAAYF,EAAMD,GAAOA,GAItFI,EAAY,SAACC,EAAgBC,EAAgBC,EAAiBC,GAAqB,IAAD,EACnEjB,mBAASQ,EAAgBM,EAAQC,IADkC,mBACtFpB,EADsF,KAC/EuB,EAD+E,KAEvFC,EAAehB,mBAkBrB,OAhBAE,qBAAU,WAaR,OAZa,SAAPe,IACJC,aAAaF,EAAab,SAC1B,IAAMgB,EAAWd,EAAgBQ,EAASC,GAE1CE,EAAab,QAAUiB,OAAOC,YAAW,WACvCN,EAASV,EAAgBM,EAAQC,IACjCK,MACCE,GAGLF,GAEO,kBAAMC,aAAaF,EAAab,YACtC,CAACQ,EAAQC,EAAQC,EAASC,IAEtBtB,G,qYCpBT,IAAM8B,EAAYC,IAAOC,IAAV,KAEH,gBAAGC,EAAH,EAAGA,UAAH,sBAA4BA,EAA5B,QACU,gBAAGC,EAAH,EAAGA,SAAH,sBAA2BA,EAA3B,QAIhBC,EAAYJ,IAAOC,IAAV,IAMXF,GAKEM,EAAM,WACV,IAAMC,EAAenB,EAAU,EAAG,IAAK,IAAK,KACtCoB,EAAoBpB,EAAU,EAAG,EAAG,IAAK,KACzCe,EAAY9B,EAAU,GAAD,OAAIkC,EAAJ,MACrBH,EAAW/B,EDxBsC,KAAiB,SCwB/BmC,GDxB4C,GAAGC,SAAS,KC0BjG,OAAO,kBAACT,EAAD,CAAWG,UAAWA,EAAWC,SAAUA,KAGvCM,EAAW,WACtB,OACE,kBAACL,EAAD,KACG,IAAIM,MAAM,IAAIC,UAAKC,GAAWC,KAAI,SAACC,EAAGC,GAAJ,OACjC,kBAAC,EAAD,CAAKC,IAAKD,SCzBEE,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzD,SAAS0D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.081559ad.chunk.js","sourcesContent":["/* eslint-disable */\nimport { nanoid } from 'nanoid';\nimport { useState, useRef, useEffect } from 'react';\n\nvar root = document.documentElement;\r\nfunction setVar(name, value) {\r\n    root.style.setProperty(\"--\" + name, value);\r\n}\r\nfunction removeVar(name) {\r\n    root.style.removeProperty(\"--\" + name);\r\n}\n\nvar useCssVar = function (value) {\r\n    var id = useState(nanoid(8))[0];\r\n    var isRegisteredRef = useRef(false);\r\n    var isMountedRef = useRef(false);\r\n    useEffect(function () {\r\n        if (isMountedRef.current) {\r\n            setVar(id, value);\r\n        }\r\n        else {\r\n            isMountedRef.current = true;\r\n        }\r\n    }, [id, value]);\r\n    useEffect(function () {\r\n        return function () { return removeVar(id); };\r\n    }, [id]);\r\n    if (!isRegisteredRef.current) {\r\n        isRegisteredRef.current = true;\r\n        setVar(id, value);\r\n    }\r\n    return id;\r\n};\n\nexport { useCssVar };\n","import { useEffect, useRef, useState } from 'react';\n\nexport const getRandomNumber = (min: number, max: number): number => Math.random() * (max - min) + min;\n\nexport const numberToColor = (number: number): string => '#' + ((number * 0xffffff) << 0).toString(16);\n\nexport const useRandom = (minVal: number, maxVal: number, minTime: number, maxTime: number) => {\n  const [value, setValue] = useState(getRandomNumber(minVal, maxVal));\n  const timeoutIdRef = useRef<number>();\n\n  useEffect(() => {\n    const tick = () => {\n      clearTimeout(timeoutIdRef.current);\n      const nextTick = getRandomNumber(minTime, maxTime);\n\n      timeoutIdRef.current = window.setTimeout(() => {\n        setValue(getRandomNumber(minVal, maxVal));\n        tick();\n      }, nextTick);\n    };\n\n    tick();\n\n    return () => clearTimeout(timeoutIdRef.current);\n  }, [minVal, maxVal, minTime, maxTime]);\n\n  return value;\n};\n","import React, { VFC } from 'react';\nimport styled from 'styled-components';\n\nimport { useCssVar } from './reactComponentLib';\nimport { numberToColor, useRandom } from './utils';\n\nconst BarStyled = styled.div<{ heightVar: string; colorVar: string }>`\n  width: 10px;\n  height: ${({ heightVar }) => `var(--${heightVar})`};\n  background-color: ${({ colorVar }) => `var(--${colorVar})`};\n  transition: height 100ms ease, background-color 100ms ease;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n  height: 200px;\n\n  ${BarStyled} {\n    margin: 0 1px;\n  }\n`;\n\nconst Bar = () => {\n  const randomHeight = useRandom(0, 100, 100, 300);\n  const randomColorNumber = useRandom(0, 1, 100, 300);\n  const heightVar = useCssVar(`${randomHeight}%`);\n  const colorVar = useCssVar(numberToColor(randomColorNumber));\n\n  return <BarStyled heightVar={heightVar} colorVar={colorVar} />;\n};\n\nexport const App: VFC = () => {\n  return (\n    <Container>\n      {new Array(50).fill(undefined).map((_, index) => (\n        <Bar key={index} />\n      ))}\n    </Container>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}